# The block is always an expression; it has a value and can become an operand.
{3; 4} + 7
@assert_eq($_, 11);

# Even when the content of a block is terminated by a semicolon,
# the block is still treated as an expression.
{3; 4;} + 7
@assert_eq($_, 11);

# It is an error to write a block containing no expression
# {}
# { ; }
# {  ;  ;  }

# A block can be "decorated":
# Inside a decorated block, the semantics change
@hexadecimal { 1; .r1 } + 2
@assert_eq($_, 1/15 + 2);

# Notable examples of a decorated block

# "@load" directive takes string literals,
# and replaces the string literals with the content of the file
# Even though string literals don't exist as a value in PeriodiCode,
# they can nevertheless appear in a decorated block
@load { "example.periodicode"; "example2.periodicode" }

# "@should_throw" directive also takes string literals.
# It evaluates the content of the string literals
# and returns the index (0-index) of the first string literal to throw an error.
# It throws whenever the content does not throw.
@should_throw { "1+2"; "@set_radix(@decimal); beef" }
@assert_eq($_, 1);
