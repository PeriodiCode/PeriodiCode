# Basic arithmetic; supports radix prefixes such as 0x and 0b
@assert_eq(3/5 + 1/4 - 1/0x32, 83/100)

# You write an `r` right before the repetition begins.
# 0.6142857142857142857142857
#    |rep  |rep  |rep  |rep  |
@assert_eq(0.6r142857, 43/70)

# The numeric literals are designed to be compatible with `e` and `p` of C++-style float literal
@assert_eq(1e2, 100)
@assert_eq(0x11.p-10, 17/1024)

# Note that you use $_ to denote the result of the previous computation
3
$_ + 2

# You can write continued fraction with the standard syntax
[3; 7, 15, 1]
@assert_eq($_, 355 / 113);

# Generalized continued fraction is automatically normalized to a canonical form
[1/2; 3/4, 5/6]
@assert_eq($_, [1; 78]);

# You can change the global radix-context,
@set_radix(@hexadecimal); @assert_eq(beef, 0d48879);
@set_radix(@decimal);

# and you can also introduce a local radix-context
@senary { .r0313452421 };
@assert_eq($_, 1/11);

# What follows the `p` is interpreted using the radix-context
@assert_eq(0x1.p10, 1024);
@assert_eq(@senary { 0x1.p10 }, 64);

# You can load other files
@load { "literal.periodicode"; "long_tutorial.periodicode" };

# And you can test for failures
@should_fail("@assert_eq(2+2, 5)");
